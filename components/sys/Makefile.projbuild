ifneq (foo$(TEST_LUA), foo)
CFLAGS += -DRUN_LUA_TESTS
endif

ifneq (foo$(TEST_COMPONENTS), foo)
CFLAGS += -DRUN_TESTS
endif

CFLAGS += -Wno-error=implicit-function-declaration -Wno-error=pointer-sign -Wno-error=address

#
# Lua RTOS configuration
# 
CFLAGS += -DINCLUDE_xTaskAbortDelay=1
CFLAGS += -DNEWLIB_HAVE_SLEEP=1
CFLAGS += -DNEWLIB_HAVE_USLEEP=1

CFLAGS += -DCPU_HZ=240000000L                   # CPU frequency in hertz
CFLAGS += -DCORE_TIMER_HZ=240000000L            # CPU core timer frequency
CFLAGS += -D_CLOCKS_PER_SEC_=configTICK_RATE_HZ # Number of interrupt ticks for reach 1 second

CFLAGS += -DPATH_MAX=64
CFLAGS += -DMAXNAMLEN=64
CFLAGS += -D__FILENAME_MAX__=64

CFLAGS += -DCONFIG_MAX_FD_BITS=4

CFLAGS += -DLWIP_IPV6=1
CFLAGS += -DLWIP_RAW=1
CFLAGS += -DLWIP_SO_LINGER=1
CFLAGS += -DLWIP_DNS=1
CFLAGS += -DLWIP_UDP=1
CFLAGS += -DLWIP_SOCKET=1
CFLAGS += -DLWIP_DNS_API_DEFINE_ERRORS=1

LDFLAGS += -Wl,--wrap=_realloc_r
LDFLAGS += -Wl,--wrap=_malloc_r
LDFLAGS += -Wl,--wrap=_calloc_r
LDFLAGS += -Wl,--wrap=open
LDFLAGS += -Wl,--wrap=_open_r
LDFLAGS += -Wl,--wrap=_unlink_r
LDFLAGS += -Wl,--wrap=_rename_r
LDFLAGS += -Wl,--wrap=_stat_r
LDFLAGS += -Wl,--wrap=mkdir
LDFLAGS += -Wl,--wrap=opendir
LDFLAGS += -Wl,--wrap=rmdir
LDFLAGS += -Wl,--wrap=access
#
# Lua configuration
#

CFLAGS += -DDEBUG_FREE_MEM=0           # Enable LUA free mem debug utility (only for debug purposes)

# Define BUILD_TIME flag, with the EPOCH time when Lua RTOS is build.
# This is used for set system time when RTC is not set.
ifneq (foo$(LUA_RTOS_BUILD_TIME), foo)
CFLAGS += -DBUILD_TIME=$(LUA_RTOS_BUILD_TIME)
else
CFLAGS += -DBUILD_TIME=$(shell date +%s)
endif

# Define BUILD_COMMIT flag, with the commit hash number used in build.
# This is used in os.version Lua function for return the build commit.
ifneq (foo$(LUA_RTOS_BUILD_COMMIT), foo)
CFLAGS += -DBUILD_COMMIT=$(LUA_RTOS_BUILD_COMMIT)
else
CFLAGS += -DBUILD_COMMIT=\"$(shell git rev-parse HEAD)\"
endif

# When building app, first make romfs to link with the app
# $(APP_ELF): | fs-romfs