diff --git a/components/lwip/port/esp32/vfs_lwip.c b/components/lwip/port/esp32/vfs_lwip.c
index 54d71912..ff393a5b 100644
--- a/components/lwip/port/esp32/vfs_lwip.c
+++ b/components/lwip/port/esp32/vfs_lwip.c
@@ -64,6 +64,8 @@ void esp_vfs_lwip_sockets_register()
         .socket_select = &lwip_select,
         .stop_socket_select = &lwip_stop_socket_select,
         .stop_socket_select_isr = &lwip_stop_socket_select_isr,
+        .writev = &lwip_writev,
+        .select = &lwip_select,
     };
     /* Non-LWIP file descriptors are from 0 to (LWIP_SOCKET_OFFSET-1). LWIP
      * file descriptors are registered from LWIP_SOCKET_OFFSET to
diff --git a/components/vfs/vfs.c b/components/vfs/vfs.c
index f0a19599..85a2597f 100644
--- a/components/vfs/vfs.c
+++ b/components/vfs/vfs.c
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+#include <errno.h>
 #include <stdlib.h>
 #include <string.h>
 #include <assert.h>
@@ -66,6 +67,20 @@ typedef struct {
     fd_set errorfds;
 } fds_triple_t;
 
+typedef struct {
+   fd_set readset;
+   fd_set writeset;
+   fd_set exceptset;
+
+   fd_set test_readset;
+   fd_set test_writeset;
+   fd_set test_exceptset;
+
+   const vfs_entry_t *vfs;
+} vfs_fd_set_t;
+
+#define VFS_FD_SET_NUM 10
+
 static vfs_entry_t* s_vfs[VFS_MAX_COUNT] = { 0 };
 static size_t s_vfs_count = 0;
 
@@ -731,6 +746,20 @@ int truncate(const char *path, off_t length)
     return ret;
 }
 
+int ftruncate(int fd, off_t length)
+{
+    const vfs_entry_t* vfs = get_vfs_for_fd(fd);
+    const int local_fd = get_local_fd(vfs, fd);
+    struct _reent* r = __getreent();
+    if (vfs == NULL || local_fd < 0) {
+        __errno_r(r) = EBADF;
+        return -1;
+    }
+    int ret;
+    CHECK_AND_CALL(ret, r, vfs, ftruncate, local_fd, length);
+    return ret;
+}
+
 static void call_end_selects(int end_index, const fds_triple_t *vfs_fds_triple)
 {
     for (int i = 0; i < end_index; ++i) {
@@ -790,172 +819,177 @@ static void esp_vfs_log_fd_set(const char *fds_name, const fd_set *fds)
     }
 }
 
+int __select_cancelled = 0;
+
+static vfs_fd_set_t *get_vfs_fd_set_for(int fd, vfs_fd_set_t *vfs_fd_set) {
+   const vfs_entry_t *vfs = s_vfs[s_fd_table[fd].vfs_index];
+
+    if (vfs) {
+       int i;
+
+       // Search if vfs has an assigned fd_set
+       for(i = 0;i < VFS_FD_SET_NUM;i++) {
+           if (vfs_fd_set[i].vfs == vfs) {
+               return &vfs_fd_set[i];
+           }
+       }
+
+       // Find an empty fd_set fot the vfs
+       for(i = 0;i < VFS_FD_SET_NUM;i++) {
+           if (!vfs_fd_set[i].vfs) {
+               vfs_fd_set[i].vfs = vfs;
+
+               return &vfs_fd_set[i];
+           }
+       }
+    }
+
+    return NULL;
+}
+
 int esp_vfs_select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout)
 {
-    int ret = 0;
-    struct _reent* r = __getreent();
+    // Convert the timeout to milliseconds
+    u32_t msectimeout = 0;
 
-    ESP_LOGD(TAG, "esp_vfs_select starts with nfds = %d", nfds);
-    if (timeout) {
-        ESP_LOGD(TAG, "timeout is %lds + %ldus", timeout->tv_sec, timeout->tv_usec);
+    if (timeout && ((timeout->tv_sec != 0) || (timeout->tv_usec != 0))) {
+       msectimeout = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
     }
-    esp_vfs_log_fd_set("readfds", readfds);
-    esp_vfs_log_fd_set("writefds", writefds);
-    esp_vfs_log_fd_set("errorfds", errorfds);
 
-    if (nfds > MAX_FDS || nfds < 0) {
-        ESP_LOGD(TAG, "incorrect nfds");
-        __errno_r(r) = EINVAL;
-        return -1;
-    }
+    // Initialize fd_set for each vfs
+    vfs_fd_set_t vfs_fd_set[VFS_FD_SET_NUM];
 
-    fds_triple_t *vfs_fds_triple;
-    if ((vfs_fds_triple = calloc(s_vfs_count, sizeof(fds_triple_t))) == NULL) {
-        __errno_r(r) = ENOMEM;
-        ESP_LOGD(TAG, "calloc is unsuccessful");
-        return -1;
+    int i;
+
+    for(i = 0;i < VFS_FD_SET_NUM;i++) {
+        FD_ZERO(&vfs_fd_set[i].readset);
+        FD_ZERO(&vfs_fd_set[i].writeset);
+        FD_ZERO(&vfs_fd_set[i].exceptset);
+        vfs_fd_set[i].vfs = NULL;
     }
 
-    int (*socket_select)(int, fd_set *, fd_set *, fd_set *, struct timeval *) = NULL;
-    for (int fd = 0; fd < nfds; ++fd) {
-        _lock_acquire(&s_fd_table_lock);
-        const bool is_socket_fd = s_fd_table[fd].permanent;
-        const int vfs_index = s_fd_table[fd].vfs_index;
+    // Split readset / writeset / exceptset to individuals fd_set
+    // for each involved file system
+    vfs_fd_set_t *fd_sets;
+
+    int fd;
+
+    for(fd = 0;fd < nfds;fd++) {
         const int local_fd = s_fd_table[fd].local_fd;
-        _lock_release(&s_fd_table_lock);
 
-        if (vfs_index < 0) {
-            continue;
+        if (readfds && FD_ISSET(fd, readfds)) {
+            fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+            if (fd_sets) {
+                FD_SET(local_fd, &fd_sets->readset);
+            }
         }
 
-        if (is_socket_fd) {
-            if (!socket_select) {
-                // no socket_select found yet so take a look
-                if (esp_vfs_safe_fd_isset(fd, readfds) ||
-                        esp_vfs_safe_fd_isset(fd, writefds) ||
-                        esp_vfs_safe_fd_isset(fd, errorfds)) {
-                    const vfs_entry_t *vfs = s_vfs[vfs_index];
-                    socket_select = vfs->vfs.socket_select;
-                }
+        if (writefds && FD_ISSET(fd, writefds)) {
+            fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+            if (fd_sets) {
+                FD_SET(local_fd, &fd_sets->writeset);
             }
-            continue;
         }
 
-        fds_triple_t *item = &vfs_fds_triple[vfs_index]; // FD sets for VFS which belongs to fd
-        if (esp_vfs_safe_fd_isset(fd, readfds)) {
-            item->isset = true;
-            FD_SET(local_fd, &item->readfds);
-            FD_CLR(fd, readfds);
-            ESP_LOGD(TAG, "removing %d from readfds and adding as local FD %d to fd_set of VFS ID %d", fd, local_fd, vfs_index);
-        }
-        if (esp_vfs_safe_fd_isset(fd, writefds)) {
-            item->isset = true;
-            FD_SET(local_fd, &item->writefds);
-            FD_CLR(fd, writefds);
-            ESP_LOGD(TAG, "removing %d from writefds and adding as local FD %d to fd_set of VFS ID %d", fd, local_fd, vfs_index);
-        }
-        if (esp_vfs_safe_fd_isset(fd, errorfds)) {
-            item->isset = true;
-            FD_SET(local_fd, &item->errorfds);
-            FD_CLR(fd, errorfds);
-            ESP_LOGD(TAG, "removing %d from errorfds and adding as local FD %d to fd_set of VFS ID %d", fd, local_fd, vfs_index);
+        if (errorfds && FD_ISSET(fd, errorfds)) {
+            fd_sets = get_vfs_fd_set_for(fd, vfs_fd_set);
+            if (fd_sets) {
+                FD_SET(local_fd, &fd_sets->exceptset);
+            }
         }
     }
 
-    // all non-socket VFSs have their FD sets in vfs_fds_triple
-    // the global readfds, writefds and errorfds contain only socket FDs (if
-    // there any)
-
-    /* Semaphore used for waiting select events from other VFS drivers when socket
-     * select is not used (not registered or socket FDs are not observed by the
-     * given call of select)
-     */
-    SemaphoreHandle_t select_sem = NULL;
-
-    if (!socket_select) {
-        // There is no socket VFS registered or select() wasn't called for
-        // any socket. Therefore, we will use our own signalization.
-        if ((select_sem = xSemaphoreCreateBinary()) == NULL) {
-            free(vfs_fds_triple);
-            __errno_r(r) = ENOMEM;
-            ESP_LOGD(TAG, "cannot create select_sem");
-            return -1;
-        }
-    }
+    // Call select for each involved file system
+    struct timeval fs_timeout = {0, 1000}; // Set a timeout of 1 millisecond for each fs
+    struct timeval start; // Start time
+    struct timeval now;   // Current time
 
-    for (int i = 0; i < s_vfs_count; ++i) {
-        const vfs_entry_t *vfs = get_vfs_for_index(i);
-        fds_triple_t *item = &vfs_fds_triple[i];
-
-        if (vfs && vfs->vfs.start_select && item->isset) {
-            // call start_select for all non-socket VFSs with has at least one FD set in readfds, writefds, or errorfds
-            // note: it can point to socket VFS but item->isset will be false for that
-            ESP_LOGD(TAG, "calling start_select for VFS ID %d with the following local FDs", i);
-            esp_vfs_log_fd_set("readfds", &item->readfds);
-            esp_vfs_log_fd_set("writefds", &item->writefds);
-            esp_vfs_log_fd_set("errorfds", &item->errorfds);
-            esp_err_t err = vfs->vfs.start_select(nfds, &item->readfds, &item->writefds, &item->errorfds, &select_sem);
-
-            if (err != ESP_OK) {
-                call_end_selects(i, vfs_fds_triple);
-                (void) set_global_fd_sets(vfs_fds_triple, s_vfs_count, readfds, writefds, errorfds);
-                if (select_sem) {
-                    vSemaphoreDelete(select_sem);
-                    select_sem = NULL;
-                }
-                free(vfs_fds_triple);
-                __errno_r(r) = EINTR;
-                ESP_LOGD(TAG, "start_select failed");
-                return -1;
-            }
-        }
-    }
+    int num = 0; // Number of set file descriptors
 
-    if (socket_select) {
-        ESP_LOGD(TAG, "calling socket_select with the following FDs");
-        esp_vfs_log_fd_set("readfds", readfds);
-        esp_vfs_log_fd_set("writefds", writefds);
-        esp_vfs_log_fd_set("errorfds", errorfds);
-        ret = socket_select(nfds, readfds, writefds, errorfds, timeout);
-        ESP_LOGD(TAG, "socket_select returned %d and the FDs are the following", ret);
-        esp_vfs_log_fd_set("readfds", readfds);
-        esp_vfs_log_fd_set("writefds", writefds);
-        esp_vfs_log_fd_set("errorfds", errorfds);
-    } else {
-        if (readfds) {
-            FD_ZERO(readfds);
-        }
-        if (writefds) {
-            FD_ZERO(writefds);
-        }
-        if (errorfds) {
-            FD_ZERO(errorfds);
-        }
+    // Get start time
+    gettimeofday(&start, NULL);
 
-        TickType_t ticks_to_wait = portMAX_DELAY;
-        if (timeout) {
-            uint32_t timeout_ms = timeout->tv_sec * 1000 + timeout->tv_usec / 1000;
-            ticks_to_wait = timeout_ms / portTICK_PERIOD_MS;
-            ESP_LOGD(TAG, "timeout is %dms", timeout_ms);
-        }
-        ESP_LOGD(TAG, "waiting without calling socket_select");
-        xSemaphoreTake(select_sem, ticks_to_wait);
-    }
+    // Scan file descriptors for each involved file system until a file descriptor is set or
+    // until timeout
+    struct _reent* r = __getreent();
+    int ret;
 
-    call_end_selects(s_vfs_count, vfs_fds_triple); // for VFSs for start_select was called before
-    if (ret >= 0) {
-        ret += set_global_fd_sets(vfs_fds_triple, s_vfs_count, readfds, writefds, errorfds);
-    }
-    if (select_sem) {
-        vSemaphoreDelete(select_sem);
-        select_sem = NULL;
-    }
-    free(vfs_fds_triple);
+    for(;;) {
+       for(i = 0;i < VFS_FD_SET_NUM;i++) {
+           if (vfs_fd_set[i].vfs) {
+               vfs_fd_set[i].test_readset = vfs_fd_set[i].readset;
+               vfs_fd_set[i].test_writeset = vfs_fd_set[i].writeset;
+               vfs_fd_set[i].test_exceptset = vfs_fd_set[i].exceptset;
+
+               CHECK_AND_CALL(ret, r, vfs_fd_set[i].vfs, select, nfds, &vfs_fd_set[i].test_readset, &vfs_fd_set[i].test_writeset, &vfs_fd_set[i].test_exceptset, &fs_timeout);
+               if (ret < 0) {
+                    return ret;
+               }
+
+               if (ret >= 0) {
+                   num = num + ret;
+
+                   for(fd = 0;fd < nfds;fd++) {
+                       if (s_vfs[s_fd_table[fd].vfs_index] != vfs_fd_set[i].vfs) continue;
+
+                       const int local_fd = s_fd_table[fd].local_fd;
+
+                       if (readfds && !FD_ISSET(local_fd, &vfs_fd_set[i].test_readset)) {
+                           FD_CLR(fd, readfds);
+                       }
+
+                       if (writefds && !FD_ISSET(local_fd, &vfs_fd_set[i].test_writeset)) {
+                           FD_CLR(fd, writefds);
+                       }
+
+                       if (errorfds && !FD_ISSET(local_fd, &vfs_fd_set[i].test_exceptset)) {
+                           FD_CLR(fd, errorfds);
+                       }
+                   }
+               }
+           }
+      }
+
+      // TODO: find a more elegant solution to stop select ....
+      if (__select_cancelled) {
+           __select_cancelled = 0;
+           __errno_r(r) = 4;
+           return -1;
+      }
+
+       // If some file descriptor are set, terminate scan
+       if (num > 0) {
+           break;
+       }
+
+       // Check timeout
+       if (msectimeout != 0) {
+           gettimeofday(&now, NULL);
+           if ((now.tv_sec - start.tv_sec) * 1000 - (((now.tv_usec - start.tv_usec) + 500) / 1000) >= msectimeout) {
+               break;
+           }
+       } else {
+           if (timeout) {
+              // timeout = 0, exit
+              break;
+           }
+       }
+    }
+
+    return num;
+}
 
-    ESP_LOGD(TAG, "esp_vfs_select returns %d", ret);
-    esp_vfs_log_fd_set("readfds", readfds);
-    esp_vfs_log_fd_set("writefds", writefds);
-    esp_vfs_log_fd_set("errorfds", errorfds);
+ssize_t writev(int fd, const struct iovec *iov, int iovcnt)
+{
+    const vfs_entry_t* vfs = get_vfs_for_fd(fd);
+    struct _reent* r = __getreent();
+    if (vfs == NULL) {
+        __errno_r(r) = EBADF;
+        return -1;
+    }
+    int local_fd = get_local_fd(vfs, fd);
+    ssize_t ret;
+    CHECK_AND_CALL(ret, r, vfs, writev, local_fd, iov, iovcnt);
     return ret;
 }
 
