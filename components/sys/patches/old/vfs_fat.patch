diff --git a/components/fatfs/src/ff.c b/components/fatfs/src/ff.c
index 4225a044..a6e60a9b 100644
--- a/components/fatfs/src/ff.c
+++ b/components/fatfs/src/ff.c
@@ -3104,7 +3104,7 @@ FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 			/* Get into the sub-directory */
 			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
-				res = FR_NO_PATH; break;
+				res = FR_NO_DIR; break;
 			}
 #if FF_FS_EXFAT
 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
@@ -4411,7 +4411,7 @@ FRESULT f_opendir (
 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 					}
 				} else {						/* This object is a file */
-					res = FR_NO_PATH;
+					res = FR_NO_DIR;
 				}
 			}
 			if (res == FR_OK) {
@@ -4798,7 +4798,7 @@ FRESULT f_unlink (
 						res = dir_sdi(&sdj, 0);
 						if (res == FR_OK) {
 							res = dir_read_file(&sdj);			/* Test if the directory is empty */
-							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
+							if (res == FR_OK) res = FR_NOT_EMPTY;	/* Not empty? */
 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 						}
 					}
@@ -4928,6 +4928,9 @@ FRESULT f_rename (
 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
 	DWORD dw;
 	DEF_NAMBUF
+	BYTE old_is_dir = 0;
+	BYTE new_is_dir = 1;
+
 
 
 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
@@ -4936,6 +4939,7 @@ FRESULT f_rename (
 		djo.obj.fs = fs;
 		INIT_NAMBUF(fs);
 		res = follow_path(&djo, path_old);		/* Check old object */
+		old_is_dir = ((res == FR_OK) && (djo.obj.attr & AM_DIR));
 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 #if FF_FS_LOCK != 0
 		if (res == FR_OK) {
@@ -4951,6 +4955,61 @@ FRESULT f_rename (
 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
 				mem_cpy(&djn, &djo, sizeof djo);
 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
+				new_is_dir = ((res == FR_OK) && (djn.obj.attr & AM_DIR));
+
+               if (new_is_dir && !old_is_dir) {
+                   res = FR_IS_DIR;
+                   LEAVE_FF(fs, res);
+               }
+
+               if (new_is_dir) {
+                  DWORD dclst = 0;
+                  FF_DIR djc;
+
+                  mem_cpy(&djc, &djn, sizeof(FF_DIR));
+
+#if FF_FS_EXFAT
+                  FFOBJID obj;
+
+                   obj.fs = fs;
+                   if (fs->fs_type == FS_EXFAT) {
+                       init_alloc_info(fs, &obj);
+                       dclst = obj.sclust;
+                   } else
+#endif
+                   {
+                       dclst = ld_clust(fs, djc.dir);
+                   }
+#if FF_FS_RPATH != 0
+                   if (dclst != fs->cdir)
+#endif
+                   {
+                       djc.obj.fs = fs;                /* Open the sub-directory */
+                       djc.obj.sclust = dclst;
+#if FF_FS_EXFAT
+                       if (fs->fs_type == FS_EXFAT) {
+                           djc.obj.objsize = obj.objsize;
+                           djc.obj.stat = obj.stat;
+                       }
+#endif
+                       res = dir_sdi(&djc, 0);
+                       if (res == FR_OK) {
+                           res = dir_read_file(&djc);          /* Test if the directory is empty */
+                           if (res == FR_OK) {
+                               res = FR_NOT_EMPTY;
+                               LEAVE_FF(fs, res);
+                           }
+                       }
+                   }
+
+                   res = dir_remove(&djn);
+                   if (res == FR_OK) {
+                       res = sync_fs(fs);
+                   }
+
+                   res = FR_NO_FILE;
+               }
+
 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 				}
@@ -4973,6 +5032,61 @@ FRESULT f_rename (
 				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 				mem_cpy(&djn, &djo, sizeof (FF_DIR));		/* Duplicate the directory object */
 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
+				new_is_dir = ((res == FR_OK) && (djn.obj.attr & AM_DIR));
+
+                if (new_is_dir && !old_is_dir) {
+                   res = FR_IS_DIR;
+                   LEAVE_FF(fs, res);
+                }
+
+				if (new_is_dir) {
+	               DWORD dclst = 0;
+	               FF_DIR djc;
+
+	               mem_cpy(&djc, &djn, sizeof(FF_DIR));
+
+#if FF_FS_EXFAT
+				   FFOBJID obj;
+
+                    obj.fs = fs;
+                    if (fs->fs_type == FS_EXFAT) {
+                        init_alloc_info(fs, &obj);
+                        dclst = obj.sclust;
+                    } else
+#endif
+                    {
+                        dclst = ld_clust(fs, djc.dir);
+                    }
+#if FF_FS_RPATH != 0
+                    if (dclst != fs->cdir)
+#endif
+                    {
+                        djc.obj.fs = fs;                /* Open the sub-directory */
+                        djc.obj.sclust = dclst;
+#if FF_FS_EXFAT
+                        if (fs->fs_type == FS_EXFAT) {
+                            djc.obj.objsize = obj.objsize;
+                            djc.obj.stat = obj.stat;
+                        }
+#endif
+                        res = dir_sdi(&djc, 0);
+                        if (res == FR_OK) {
+                            res = dir_read_file(&djc);          /* Test if the directory is empty */
+                            if (res == FR_OK) {
+                                res = FR_NOT_EMPTY;
+                                LEAVE_FF(fs, res);
+                            }
+                        }
+                    }
+
+                    res = dir_remove(&djn);
+                    if (res == FR_OK) {
+                        res = sync_fs(fs);
+                    }
+
+                    res = FR_NO_FILE;
+                }
+
 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 				}
diff --git a/components/fatfs/src/ff.h b/components/fatfs/src/ff.h
index d36815fc..bafcbb97 100644
--- a/components/fatfs/src/ff.h
+++ b/components/fatfs/src/ff.h
@@ -236,7 +236,10 @@ typedef enum {
 	FR_LOCKED,				/* (16) The operation is rejected according to the file sharing policy */
 	FR_NOT_ENOUGH_CORE,		/* (17) LFN working buffer could not be allocated */
 	FR_TOO_MANY_OPEN_FILES,	/* (18) Number of open files > FF_FS_LOCK */
-	FR_INVALID_PARAMETER	/* (19) Given parameter is invalid */
+	FR_INVALID_PARAMETER,	/* (19) Given parameter is invalid */
+	FR_IS_DIR,
+    FR_NO_DIR,
+    FR_NOT_EMPTY,
 } FRESULT;
 
 
diff --git a/components/fatfs/src/vfs_fat.c b/components/fatfs/src/vfs_fat.c
index 6d7019a1..68db474a 100644
--- a/components/fatfs/src/vfs_fat.c
+++ b/components/fatfs/src/vfs_fat.c
@@ -24,6 +24,8 @@
 #include "ff.h"
 #include "diskio.h"
 
+#include <sys/vfs/vfs.h>
+
 typedef struct {
     char fat_drive[8];  /* FAT drive name */
     char base_path[ESP_VFS_PATH_MAX];   /* base path in VFS where partition is registered */
@@ -36,14 +38,6 @@ typedef struct {
     FIL files[0];   /* array with max_files entries; must be the final member of the structure */
 } vfs_fat_ctx_t;
 
-typedef struct {
-    DIR dir;
-    long offset;
-    FF_DIR ffdir;
-    FILINFO filinfo;
-    struct dirent cur_dirent;
-} vfs_fat_dir_t;
-
 /* Date and time storage formats in FAT */
 typedef union {
     struct {
@@ -267,6 +261,9 @@ static int fresult_to_errno(FRESULT fr)
         case FR_NOT_ENOUGH_CORE: return ENOMEM;
         case FR_TOO_MANY_OPEN_FILES: return ENFILE;
         case FR_INVALID_PARAMETER: return EINVAL;
+        case FR_NO_DIR: return ENOTDIR;
+        case FR_NOT_EMPTY: return ENOTEMPTY;
+        case FR_IS_DIR: return EISDIR;
         case FR_OK: return 0;
     }
     assert(0 && "unhandled FRESULT");
@@ -484,7 +481,7 @@ static int vfs_fat_stat(void* ctx, const char * path, struct stat * st)
         .tm_hour = ftime.hour
     };
     st->st_mtime = mktime(&tm);
-    st->st_atime = 0;
+    st->st_atime = mktime(&tm);
     st->st_ctime = 0;
     return 0;
 }
@@ -494,7 +491,26 @@ static int vfs_fat_unlink(void* ctx, const char *path)
     vfs_fat_ctx_t* fat_ctx = (vfs_fat_ctx_t*) ctx;
     _lock_acquire(&fat_ctx->lock);
     prepend_drive_to_path(fat_ctx, &path, NULL);
-    FRESULT res = f_unlink(path);
+
+    FRESULT res;
+    FILINFO fno;
+
+    // Sanity check: it is not a directory
+    res = f_stat(path, &fno);
+    if (res != FR_OK) {
+        _lock_release(&fat_ctx->lock);
+        ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
+        errno = fresult_to_errno(res);
+        return -1;
+    }
+
+    if (fno.fattrib & AM_DIR) {
+        _lock_release(&fat_ctx->lock);
+        errno = EPERM;
+        return -1;
+    }
+
+    res = f_unlink(path);
     _lock_release(&fat_ctx->lock);
     if (res != FR_OK) {
         ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
@@ -590,17 +606,19 @@ static DIR* vfs_fat_opendir(void* ctx, const char* name)
 {
     vfs_fat_ctx_t* fat_ctx = (vfs_fat_ctx_t*) ctx;
     _lock_acquire(&fat_ctx->lock);
-    prepend_drive_to_path(fat_ctx, &name, NULL);
-    vfs_fat_dir_t* fat_dir = calloc(1, sizeof(vfs_fat_dir_t));
+
+    vfs_dir_t *fat_dir = vfs_allocate_dir("fat", name);
     if (!fat_dir) {
         _lock_release(&fat_ctx->lock);
-        errno = ENOMEM;
         return NULL;
     }
-    FRESULT res = f_opendir(&fat_dir->ffdir, name);
+
+    prepend_drive_to_path(fat_ctx, &name, NULL);
+
+    FRESULT res = f_opendir((FF_DIR *)fat_dir->fs_dir, name);
     _lock_release(&fat_ctx->lock);
     if (res != FR_OK) {
-        free(fat_dir);
+        vfs_free_dir(fat_dir);
         ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
         errno = fresult_to_errno(res);
         return NULL;
@@ -611,9 +629,9 @@ static DIR* vfs_fat_opendir(void* ctx, const char* name)
 static int vfs_fat_closedir(void* ctx, DIR* pdir)
 {
     assert(pdir);
-    vfs_fat_dir_t* fat_dir = (vfs_fat_dir_t*) pdir;
-    FRESULT res = f_closedir(&fat_dir->ffdir);
-    free(pdir);
+    vfs_dir_t* fat_dir = (vfs_dir_t*) pdir;
+    FRESULT res = f_closedir((FF_DIR *)fat_dir->fs_dir);
+    vfs_free_dir(fat_dir);
     if (res != FR_OK) {
         ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
         errno = fresult_to_errno(res);
@@ -624,13 +642,23 @@ static int vfs_fat_closedir(void* ctx, DIR* pdir)
 
 static struct dirent* vfs_fat_readdir(void* ctx, DIR* pdir)
 {
-    vfs_fat_dir_t* fat_dir = (vfs_fat_dir_t*) pdir;
+    vfs_dir_t* fat_dir = (vfs_dir_t*) pdir;
     struct dirent* out_dirent;
-    int err = vfs_fat_readdir_r(ctx, pdir, &fat_dir->cur_dirent, &out_dirent);
+
+    // If there are mount points to read, read them first
+    if (fat_dir->mount) {
+        struct dirent *ment = mount_readdir((DIR *)pdir);
+        if (ment) {
+            return ment;
+        }
+    }
+
+    int err = vfs_fat_readdir_r(ctx, pdir, &fat_dir->ent, &out_dirent);
     if (err != 0) {
         errno = err;
         return NULL;
     }
+
     return out_dirent;
 }
 
@@ -638,25 +666,37 @@ static int vfs_fat_readdir_r(void* ctx, DIR* pdir,
         struct dirent* entry, struct dirent** out_dirent)
 {
     assert(pdir);
-    vfs_fat_dir_t* fat_dir = (vfs_fat_dir_t*) pdir;
-    FRESULT res = f_readdir(&fat_dir->ffdir, &fat_dir->filinfo);
+    vfs_dir_t* fat_dir = (vfs_dir_t*) pdir;
+
+    // If there are mount points to read, read them first
+    if (fat_dir->mount) {
+        struct dirent *ment = mount_readdir((DIR *)pdir);
+        if (ment) {
+            *out_dirent = ment;
+            return 0;
+        }
+    }
+
+    FRESULT res = f_readdir((FF_DIR *)fat_dir->fs_dir, (FILINFO *)fat_dir->fs_info);
     if (res != FR_OK) {
         *out_dirent = NULL;
         ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
         return fresult_to_errno(res);
     }
-    if (fat_dir->filinfo.fname[0] == 0) {
+    if (((FILINFO *)fat_dir->fs_info)->fname[0] == 0) {
         // end of directory
         *out_dirent = NULL;
         return 0;
     }
     entry->d_ino = 0;
-    if (fat_dir->filinfo.fattrib & AM_DIR) {
+    if (((FILINFO *)fat_dir->fs_info)->fattrib & AM_DIR) {
         entry->d_type = DT_DIR;
+        entry->d_fsize = 0;
     } else {
         entry->d_type = DT_REG;
+        entry->d_fsize = ((FILINFO *)fat_dir->fs_info)->fsize;
     }
-    strlcpy(entry->d_name, fat_dir->filinfo.fname,
+    strlcpy(entry->d_name, ((FILINFO *)fat_dir->fs_info)->fname,
             sizeof(entry->d_name));
     fat_dir->offset++;
     *out_dirent = entry;
@@ -666,17 +706,17 @@ static int vfs_fat_readdir_r(void* ctx, DIR* pdir,
 static long vfs_fat_telldir(void* ctx, DIR* pdir)
 {
     assert(pdir);
-    vfs_fat_dir_t* fat_dir = (vfs_fat_dir_t*) pdir;
+    vfs_dir_t* fat_dir = (vfs_dir_t*) pdir;
     return fat_dir->offset;
 }
 
 static void vfs_fat_seekdir(void* ctx, DIR* pdir, long offset)
 {
     assert(pdir);
-    vfs_fat_dir_t* fat_dir = (vfs_fat_dir_t*) pdir;
+    vfs_dir_t* fat_dir = (vfs_dir_t*) pdir;
     FRESULT res;
     if (offset < fat_dir->offset) {
-        res = f_rewinddir(&fat_dir->ffdir);
+        res = f_rewinddir((FF_DIR *)fat_dir->fs_dir);
         if (res != FR_OK) {
             ESP_LOGD(TAG, "%s: rewinddir fresult=%d", __func__, res);
             errno = fresult_to_errno(res);
@@ -685,7 +725,7 @@ static void vfs_fat_seekdir(void* ctx, DIR* pdir, long offset)
         fat_dir->offset = 0;
     }
     while (fat_dir->offset < offset) {
-        res = f_readdir(&fat_dir->ffdir, &fat_dir->filinfo);
+        res = f_readdir((FF_DIR *)fat_dir->fs_dir, (FILINFO *)fat_dir->fs_info);
         if (res != FR_OK) {
             ESP_LOGD(TAG, "%s: f_readdir fresult=%d", __func__, res);
             errno = fresult_to_errno(res);
@@ -715,8 +755,34 @@ static int vfs_fat_rmdir(void* ctx, const char* name)
 {
     vfs_fat_ctx_t* fat_ctx = (vfs_fat_ctx_t*) ctx;
     _lock_acquire(&fat_ctx->lock);
+
+    if (strcmp(name,"/") == 0) {
+        _lock_release(&fat_ctx->lock);
+        errno = EBUSY;
+        return -1;
+    }
+
     prepend_drive_to_path(fat_ctx, &name, NULL);
-    FRESULT res = f_unlink(name);
+
+    FRESULT res;
+    FILINFO fno;
+
+    // Sanity check: it is a directory
+    res = f_stat(name, &fno);
+    if (res != FR_OK) {
+        _lock_release(&fat_ctx->lock);
+        ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
+        errno = fresult_to_errno(res);
+        return -1;
+    }
+
+    if (!(fno.fattrib & AM_DIR)) {
+        _lock_release(&fat_ctx->lock);
+        errno = ENOTDIR;
+        return -1;
+    }
+
+    res = f_unlink(name);
     _lock_release(&fat_ctx->lock);
     if (res != FR_OK) {
         ESP_LOGD(TAG, "%s: fresult=%d", __func__, res);
