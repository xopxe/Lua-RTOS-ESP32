--- a/components/lwip/include/lwip/posix/netdb.h
+++ b/components/lwip/include/lwip/posix/netdb.h
@@ -30,4 +30,63 @@
  *
  */
 
+#ifndef _LWIP_NETDB_H
+#define _LWIP_NETDB_H
+
 #include "lwip/netdb.h"
+
+// Lua RTOS additions
+struct hostent *gethostbyname(const char *name);
+struct hostent *gethostbyaddr(const void *addr, socklen_t len, int type);
+const char *hstrerror(int err);
+
+#include "lwip/sockets.h"
+
+#define EAI_AGAIN 206
+#define EAI_BADFLAGS 207
+#define EAI_OVERFLOW 208
+
+ struct servent {
+      char  *s_name;       /* official service name */
+      char **s_aliases;    /* alias list */
+      int    s_port;       /* port number */
+      char  *s_proto;      /* protocol to use */
+   };
+
+/*
+ * Error return codes from getaddrinfo()
+ */
+ #define EAI_ADDRFAMILY   1      /* address family for hostname not supported */
+ #define EAI_NODATA       7      /* no address associated with hostname */
+ #define EAI_SOCKTYPE    10      /* ai_socktype not supported */
+ #define EAI_SYSTEM      11      /* system error returned in errno */
+ #define EAI_BADHINTS    12
+ #define EAI_PROTOCOL    13
+ #define EAI_MAX         14
+
+/*
+ * Constants for getnameinfo()
+ */
+#define    NI_MAXHOST  1025
+#define    NI_MAXSERV  32
+
+/*
+ * Flag values for getnameinfo()
+ */
+#define    NI_NOFQDN   0x00000001
+#define    NI_NUMERICHOST  0x00000002
+#define    NI_NAMEREQD 0x00000004
+#define    NI_NUMERICSERV  0x00000008
+#define    NI_DGRAM    0x00000010
+#define NI_WITHSCOPEID 0x00000020
+
+int
+ getnameinfo(const struct sockaddr *sa, socklen_t salen,
+           char *host, size_t hostlen,
+           char *serv, size_t servlen, int flags);
+
+const char *gai_strerror(int ecode);
+
+struct servent *getservbyname(const char *name, const char *proto);
+
+#endif
diff --git a/components/newlib/include/time.h b/components/newlib/include/time.h
index d7b6612d..55fec5a4 100644
--- a/components/newlib/include/time.h
+++ b/components/newlib/include/time.h
@@ -283,6 +283,9 @@ int _EXFUN(clock_getenable_attr, (clockid_t clock_id, int *attr));
 
 #endif /* _POSIX_CPUTIME or _POSIX_THREAD_CPUTIME */
 
+// Functions implemented in Lua RTOS
+int nanosleep(const struct timespec *req, struct timespec *rem);
+
 #ifdef __cplusplus
 }
 #endif
