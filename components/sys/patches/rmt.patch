diff --git a/components/driver/include/driver/rmt.h b/components/driver/include/driver/rmt.h
index 7abf63ec..b965086f 100644
--- a/components/driver/include/driver/rmt.h
+++ b/components/driver/include/driver/rmt.h
@@ -817,7 +817,7 @@ rmt_tx_end_callback_t rmt_register_tx_end_callback(rmt_tx_end_fn_t function, voi
  *--------------------------END OF EXAMPLE --------------------------
  */
 
-
+esp_err_t rmt_config_one(const rmt_config_t* rmt_param, uint8_t *chan);
 
 #ifdef __cplusplus
 }
diff --git a/components/driver/rmt.c b/components/driver/rmt.c
index 8ee1640c..69e10c23 100644
--- a/components/driver/rmt.c
+++ b/components/driver/rmt.c
@@ -930,3 +930,111 @@ esp_err_t rmt_write_sample(rmt_channel_t channel, const uint8_t *src, size_t src
     }
     return ESP_OK;
 }
+
+esp_err_t rmt_config_one(const rmt_config_t* rmt_param, uint8_t *chan)
+{
+    uint8_t mode = rmt_param->rmt_mode;
+    uint8_t gpio_num = rmt_param->gpio_num;
+    uint8_t mem_cnt = rmt_param->mem_block_num;
+    int clk_div = rmt_param->clk_div;
+    uint32_t carrier_freq_hz = rmt_param->tx_config.carrier_freq_hz;
+    bool carrier_en = rmt_param->tx_config.carrier_en;
+
+    /* Get a free channel */
+    uint8_t i;
+    uint8_t channel;
+
+    for(i=0;i < RMT_CHANNEL_MAX;i++) {
+        if(p_rmt_obj[i] == NULL) {
+           channel = i;
+           break;
+        }
+    }
+
+    if (i == RMT_CHANNEL_MAX) {
+        return ESP_ERR_NOT_FOUND;
+    }
+
+    *chan = channel;
+
+    RMT_CHECK(channel < RMT_CHANNEL_MAX, RMT_CHANNEL_ERROR_STR, ESP_ERR_INVALID_ARG);
+    RMT_CHECK(GPIO_IS_VALID_GPIO(gpio_num), RMT_GPIO_ERROR_STR, ESP_ERR_INVALID_ARG);
+    RMT_CHECK((mem_cnt + channel <= 8 && mem_cnt > 0), RMT_MEM_CNT_ERROR_STR, ESP_ERR_INVALID_ARG);
+    RMT_CHECK((clk_div > 0), RMT_CLK_DIV_ERROR_STR, ESP_ERR_INVALID_ARG);
+    if (mode == RMT_MODE_TX) {
+        RMT_CHECK((!carrier_en || carrier_freq_hz > 0), "RMT carrier frequency can't be zero", ESP_ERR_INVALID_ARG);
+    }
+
+    periph_module_enable(PERIPH_RMT_MODULE);
+
+    RMT.conf_ch[channel].conf0.div_cnt = clk_div;
+    /*Visit data use memory not FIFO*/
+    rmt_set_data_mode(RMT_DATA_MODE_MEM);
+    /*Reset tx/rx memory index */
+    portENTER_CRITICAL(&rmt_spinlock);
+    RMT.conf_ch[channel].conf1.mem_rd_rst = 1;
+    RMT.conf_ch[channel].conf1.mem_wr_rst = 1;
+    portEXIT_CRITICAL(&rmt_spinlock);
+
+    if(mode == RMT_MODE_TX) {
+        uint32_t rmt_source_clk_hz = 0;
+        uint16_t carrier_duty_percent = rmt_param->tx_config.carrier_duty_percent;
+        uint8_t carrier_level = rmt_param->tx_config.carrier_level;
+        uint8_t idle_level = rmt_param->tx_config.idle_level;
+
+        portENTER_CRITICAL(&rmt_spinlock);
+        RMT.conf_ch[channel].conf1.tx_conti_mode = rmt_param->tx_config.loop_en;
+        /*Memory set block number*/
+        RMT.conf_ch[channel].conf0.mem_size = mem_cnt;
+        RMT.conf_ch[channel].conf1.mem_owner = RMT_MEM_OWNER_TX;
+        /*We use APB clock in this version, which is 80Mhz, later we will release system reference clock*/
+        RMT.conf_ch[channel].conf1.ref_always_on = RMT_BASECLK_APB;
+        rmt_source_clk_hz = RMT_SOURCE_CLK(RMT_BASECLK_APB);
+        /*Set idle level */
+        RMT.conf_ch[channel].conf1.idle_out_en = rmt_param->tx_config.idle_output_en;
+        RMT.conf_ch[channel].conf1.idle_out_lv = idle_level;
+        portEXIT_CRITICAL(&rmt_spinlock);
+
+        /*Set carrier*/
+        RMT.conf_ch[channel].conf0.carrier_en = carrier_en;
+        if (carrier_en) {
+            uint32_t duty_div, duty_h, duty_l;
+            duty_div = rmt_source_clk_hz / carrier_freq_hz;
+            duty_h = duty_div * carrier_duty_percent / 100;
+            duty_l = duty_div - duty_h;
+            RMT.conf_ch[channel].conf0.carrier_out_lv = carrier_level;
+            RMT.carrier_duty_ch[channel].high = duty_h;
+            RMT.carrier_duty_ch[channel].low = duty_l;
+        } else {
+            RMT.conf_ch[channel].conf0.carrier_out_lv = 0;
+            RMT.carrier_duty_ch[channel].high = 0;
+            RMT.carrier_duty_ch[channel].low = 0;
+        }
+        ESP_LOGD(RMT_TAG, "Rmt Tx Channel %u|Gpio %u|Sclk_Hz %u|Div %u|Carrier_Hz %u|Duty %u",
+                 channel, gpio_num, rmt_source_clk_hz, clk_div, carrier_freq_hz, carrier_duty_percent);
+
+    }
+    else if(RMT_MODE_RX == mode) {
+        uint8_t filter_cnt = rmt_param->rx_config.filter_ticks_thresh;
+        uint16_t threshold = rmt_param->rx_config.idle_threshold;
+
+        portENTER_CRITICAL(&rmt_spinlock);
+        /*clock init*/
+        RMT.conf_ch[channel].conf1.ref_always_on = RMT_BASECLK_APB;
+        uint32_t rmt_source_clk_hz = RMT_SOURCE_CLK(RMT_BASECLK_APB);
+        /*memory set block number and owner*/
+        RMT.conf_ch[channel].conf0.mem_size = mem_cnt;
+        RMT.conf_ch[channel].conf1.mem_owner = RMT_MEM_OWNER_RX;
+        /*Set idle threshold*/
+        RMT.conf_ch[channel].conf0.idle_thres = threshold;
+        /* Set RX filter */
+        RMT.conf_ch[channel].conf1.rx_filter_thres = filter_cnt;
+        RMT.conf_ch[channel].conf1.rx_filter_en = rmt_param->rx_config.filter_en;
+        portEXIT_CRITICAL(&rmt_spinlock);
+
+        ESP_LOGD(RMT_TAG, "Rmt Rx Channel %u|Gpio %u|Sclk_Hz %u|Div %u|Thresold %u|Filter %u",
+            channel, gpio_num, rmt_source_clk_hz, clk_div, threshold, filter_cnt);
+    }
+    rmt_set_pin(channel, mode, gpio_num);
+    return ESP_OK;
+}
